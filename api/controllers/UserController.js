// Generated by CoffeeScript 1.6.3
/**
* UserController
*
* @module      :: Controller
* @description	:: A set of functions called `actions`.
*
*                 Actions contain code telling Sails how to respond to a certain type of request.
*                 (i.e. do stuff, then send some JSON, show an HTML page, or redirect to another URL)
*
*                 You can configure the blueprint URLs which trigger these actions (`config/controllers.js`)
*                 and/or override them with custom routes (`config/routes.js`)
*
*                 NOTE: The code you write here supports both HTTP and Socket.io automatically.
*
* @docs        :: http://sailsjs.org/#!documentation/controllers
*/


(function() {
  var util;

  util = require('util');

  module.exports = {
    /**
    * Action for a new user
    */

    "new": function(req, res) {
      return res.view();
    },
    /**
    * Action to create a user
    */

    create: function(req, res, next) {
      return User.create(req.params.all(), function(err, user) {
        if (err) {
          console.log(util.inspect(err, false, null));
          req.session.flash = {
            err: err
          };
          res.redirect('/user/new');
        }
        return res.redirect("/user/show/" + user.id);
      });
    },
    show: function(req, res, next) {
      return User.findOne(req.param('id'), function(err, user) {
        if (err) {
          console.log(util.inspect(err, false, null));
          return next(err);
        }
        if (!user) {
          return next();
        }
        return res.view({
          user: user
        });
      });
    },
    edit: function(req, res, next) {
      return User.findOne(req.param('id'), function(err, user) {
        if (err) {
          console.log(util.inspect(err, false, null));
          return next(err);
        }
        if (!user) {
          return next('Kein Nutzer gefunden');
        }
        return res.view({
          user: user
        });
      });
    },
    update: function(req, res, next) {
      return User.update(req.param('id'), req.params.all(), function(err, user) {
        if (err || !user) {
          console.log(util.inspect(err, false, null));
          return res.redirect("/user/edit/" + (req.param('id')));
        }
        return res.redirect("/user/show/" + (req.param('id')));
      });
    },
    index: function(req, res, next) {
      return User.find(function(err, users) {
        if (err) {
          console.log(util.inspect(err, false, null));
          return next(err);
        }
        return res.view({
          users: users
        });
      });
    },
    destroy: function(req, res, next) {
      console.log(req.method);
      if (req.method !== 'DELETE') {
        return next('User können nur mit Buttons gelöscht werden!');
      }
      return User.findOne(req.param('id'), function(err, user) {
        if (err) {
          console.log(util.inspect(err, false, null));
          return next(err);
        }
        if (!user) {
          return next('Kein Nutzer gefunden');
        }
        User.destroy(req.param('id'), function(err) {
          if (err) {
            console.log(util.inspect(err, false, null));
            return next(err);
          }
        });
        return res.redirect('/user');
      });
    },
    _config: {}
  };

}).call(this);

/*
//@ sourceMappingURL=UserController.map
*/
